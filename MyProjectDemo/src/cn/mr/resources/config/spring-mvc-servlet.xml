<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-4.2.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">  
  <!-- 启动Springmvc注解驱动，会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean,是spring MVC为@Controllers分发请求所必须的 -->
  <mvc:annotation-driven>
    <mvc:message-converters register-defaults="true">
      <bean class="org.springframework.http.converter.StringHttpMessageConverter">
        <constructor-arg value="UTF-8" />
        <property name="supportedMediaTypes">
          <list>
              <value>text/plain;charset=UTF-8</value>
              <value>text/html;charset=UTF-8</value>
          </list>
        </property>
      </bean>
    </mvc:message-converters>
  </mvc:annotation-driven>
  
  <!-- 适时地向 Spring 容器注册AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor、
       PersistenceAnnotationBeanPostProcessor 以及 RequiredAnnotationBeanPostProcessor 这 4 个BeanPostProcessor。
                       注册这4个 BeanPostProcessor的作用，就是为了你的系统能够识别相应的注解。
                      不过，我们使用注解一般都会配置扫描包路径选项<context:component-scan base-package=”XX.XX”/> 
                      该配置项其实也包含了自动注入上述processor的功能，因此当使用 <context:component-scan/> 后，就可以将 <context:annotation-config/> 移除了。                
  -->
  <!-- <context:annotation-config/> -->
  
  <!-- 注解扫描包,use-default-filters="false"表示不要使用默认的过滤器 -->
  <!-- Filter Type	Examples                    Expression	Description
	   annotation	org.example.SomeAnnotation	符合SomeAnnoation的target class
       assignable	org.example.SomeClass	              指定class或interface的全名
       aspectj	    org.example..*Service+	    AspectJ語法
       regex	    org\.example\.Default.*	    Regelar Expression
       custom	    org.example.MyTypeFilter	Spring3新增自訂Type，實作org.springframework.core.type.TypeFilter -->
  <context:component-scan base-package="cn.mr" use-default-filters="false">
    <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />   
  </context:component-scan>
  
  <!-- MutiActionController默认就是用此解析器，所以，不要配置，根据请求方法路径解析请求 -->
  <!-- <bean id="methodNameResolver" class="org.springframework.web.servlet.mvc.multiaction.InternalPathMethodNameResolver" /> -->
  
  <!-- 用注解配置 -->
  <!-- <bean id="urlMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
    <property name="mappings">
      <props>
        <prop key="/**/mainMgmt/*.do">mainController</prop>
      </props>  
    </property>
  </bean>    -->   
  
  <!-- 配置视图解析器 -->
  <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"></property> 
    <property name="prefix" value="/view/jsp/"/>
    <property name="suffix" value=""/>
  </bean>
  
  <!-- 用注解配置 -->
  <!-- <bean id="mainController" class="cn.mr.common.controller.MainController">
    
  </bean> -->
</beans>