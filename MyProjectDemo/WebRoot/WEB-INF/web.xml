<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" 
	xmlns="http://java.sun.com/xml/ns/javaee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
	
  <display-name>web.xml中的加载顺序为：listener >> filter >> servlet >> spring</display-name>  
 
  <!-- spring上下文载入监听器，确保web服务启动时，spring已经完成初始化  -->  
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <!-- 防止Spring内存泄漏监听器 -->  
  <listener>
    <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
  </listener>
  <!-- 日志监听 -->
  <listener>
    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>
  
  <!-- 载入spring配置 -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>
      classpath:/cn/mr/resources/config/spring-*.xml,
      classpath:/cn/mr/resources/config/context-*.xml
    </param-value>
  </context-param>
  
  <!-- 载入log4j配置 -->
  <context-param>
    <param-name>log4jConfigLocation</param-name>
    <param-value>classpath:/cn/mr/resources/properties/log4j.properties</param-value>
  </context-param>
  
  <!-- spring servlet中央控制器 -->
  <servlet>
    <servlet-name>SpringMVC</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:/cn/mr/resources/config/spring-mvc-servlet.xml</param-value>
    </init-param>
    <!-- 项目启动的时候就启动，1代表启动顺序 -->
    <load-on-startup>1</load-on-startup>
    <!-- 为servlet设置异步请求处理 -->
    <!-- <async-supported>true</async-supported>  --> 
  </servlet>
  <servlet-mapping>
    <servlet-name>SpringMVC</servlet-name>
    <url-pattern>*.do</url-pattern>
  </servlet-mapping>
  
  <!-- 字符编码过滤器 -->
  <filter>
    <filter-name>encodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <!-- 意思是指无论客户端请求是否包含了编码，都用过滤器里的编码来解析请求 -->
    <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>encodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  
  <!-- spring security 配置 -->
  <filter>
    <filter-name>springSecurityFilterChain</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>springSecurityFilterChain</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <!-- 对客户端请求的静态资源如jpg、png、gif、js文件等的请求交由默认的servlet进行处理 -->
  <!-- 如果你的DispatcherServlet拦截"/"，为了实现REST风格，拦截了所有的请求，那么同时对*.js,*.jpg等静态文件的访问也就被拦截了。 -->
  <!-- 我们要解决这个问题。 -->
  <!-- 目的：可以正常访问静态文件，不可以找不到静态文件报404。 -->
  <!-- 方案一：激活Tomcat的defaultServlet来处理静态文件 -->
  <!-- <servlet-mapping>
	<servlet-name>default</servlet-name>
	<url-pattern>*.jpg</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
	<servlet-name>default</servlet-name>
	<url-pattern>*.png</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
	<servlet-name>default</servlet-name>
	<url-pattern>*.gif</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
	<servlet-name>default</servlet-name>
	<url-pattern>*.ico</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>default</servlet-name>
	<url-pattern>*.gif</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
	<servlet-name>default</servlet-name>
	<url-pattern>*.js</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
	<servlet-name>default</servlet-name>
	<url-pattern>*.css</url-pattern>
  </servlet-mapping> -->
  
  <!-- 配置hib延迟加载时使用OpenSessionInView，控制session的开关 -->
  <!-- <filter>
    <filter-name>openSession</filter-name>
    <filter-class>org.springframework.orm.hibernate4.support.OpenSessionInViewFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>openSession</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping> -->
  
  <!-- 配置session存在时间 -->
  <session-config>
    <session-timeout>60</session-timeout>
  </session-config>
  
  
  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>
</web-app>
