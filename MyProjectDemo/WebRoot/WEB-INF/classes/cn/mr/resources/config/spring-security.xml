<?xml version="1.0" encoding="UTF-8"?>
<!-- 这里必须使用security的命名空间,提供了beans这个假名 -->  
<beans:beans xmlns="http://www.springframework.org/schema/security"  
  xmlns:beans="http://www.springframework.org/schema/beans"  
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
  xsi:schemaLocation="http://www.springframework.org/schema/beans  
           http://www.springframework.org/schema/beans/spring-beans-4.2.xsd  
           http://www.springframework.org/schema/security  
           http://www.springframework.org/schema/security/spring-security-3.1.xsd"> 
    
    <!-- 需要过滤不被拦截的请求   -->
    <http pattern="/login.do" security="none"/>
    <http pattern="/denied.do" security="none"/>
    <!--
	开启支持方法注解的权限控制：
	@PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
	@PostAuthorize：该注解用来在方法执行完之后进行访问控制检查。
	@PostFilter：该注解用来对方法的返回结果进行过滤。从返回的集合中过滤掉表达式值为假的元素。如@PostFilter("hasPermission(filterObject, 'read')")说明返回的结果中只保留当前用户有读权限的元素。
	@PreFilter：该注解用来对方法调用时的参数进行过滤。	
	<global-method-security pre-post-annotations="enabled" />
	-->
	<!--
		use-expressions="true" 的意思是开启表达式
		entry-point-ref 配置自定义登录  
		access-denied-page的意思是，当验证权限失败后会跳转到的页面
	-->
	<http use-expressions="true" auto-config="false" entry-point-ref="myAuthenticationEntryPoint" access-denied-page="/denied.jsp">
	  <intercept-url pattern="/background/**ff" access=""/>
	</http>
	
	<!-- 未登录的切入点 -->
	<beans:bean id="myAuthenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
	  <beans:property name="loginFormUrl" value="/login.do"/>
	</beans:bean>
	
	<!-- 实现了UserDetailsService的Bean 用户拥有的权限：登录后取得用户所保有的权限信息，认证管理器  -->
	<authentication-manager alias="myAuthenticationManager">
		<authentication-provider user-service-ref="myUserDetailService" />
	</authentication-manager>
</beans:beans>